#Project #1, BCH 5884
#repository:

import sys
import math

#read in pdb file
f = open("2FA9noend.pdb")
lines = f.readlines()
f.close()

#create an input statement to allow the user to choose how to center the data
a = input("Would you like to center your data geometrically (g) or by center of mass (c)? [g/c] ")
g = "g"
c = "c"

#turns records into a list
records = []

#create a dictionary of the elements and their masses in g/mol
massdict = {"H":1.01, "C":12.01, "N":14.01, "O":16.0, "P":30.97, "S":32.07, "MG":24.30}
for line in lines:
	atomdict = {}

	#ATOM
	column1 = str(line[0:5])

	#serial number
	column2 = str(line[6:11])

	#atom name
	column3 = str(line[12:16])

	#residue name
	column4 = str(line[17:20])

	#chain identifier
	column5 = str(line[21])

	#residue sequence number
	column6 = int(line[22:26])

	#x coordinates
	x = float(line[30:38])

	#y coordinates
	y = float(line[39:46])

	#z coordinates
	z = float(line[47:54])

	#occupancy
	column10 = float(line[55:60])

	#temperature factor
	column11 = float(line[61:66])

	#element
	element = line[76:78].strip()

	#mass of element
	mass = massdict[element]

    #appending all records
	records.append([column1, column2, column3, column4, column5, column6, x, y, z, column10, column11, element, mass])


#Create total coordinate and total mass variables
totalmass = 0
totalx = 0
totaly = 0
totalz = 0

#calculate top of fraction, total coordinate * total mass
for record in records:
	totalmass += record[12]
	totalx += record[12] * record[6]
	totaly += record[12] * record[7]
	totalz += record[12] * record[8]

#calculate center of mass: total coordinate divided by total mass
cmx = totalx / totalmass
cmy = totaly / totalmass
cmz = totalz / totalmass


# STEP 3: create a new textfile (pdbfile); write data to the new file
# When writing data to the new file, the new coordinates = original coordinates - center mass coordinates

#create pdb output file name and conditions
f = open("project01_output.pdb",'w')
for atom in records:
    if a == g:
        s = "{0:6}{1:6}{2:5}{3:4}{4:1}{5:4}{6:12.3f}{7:8.3f}{8:8.3f}{9:6.2f}{10:6.2f}{11:>12}\n"
            #set up how wide each column should be to accomodate the necessary characters
            #if this step were skipped, the numbers would appear as a garbled mix with no organization
        f.write(s.format(atom[0], atom[1], atom[2], atom[3], atom[4], atom[5], atom[6], atom[7], atom[8], atom[9], atom[10], atom[11]))
        #if a (input) = g (geometrical), the pdb will be output without being modified

    elif a == c:
        s = "{0:6}{1:6}{2:5}{3:4}{4:1}{5:4}{6:12.3f}{7:8.3f}{8:8.3f}{9:6.2f}{10:6.2f}{11:>12}\n"
            #the purpose is the same as for the a == g condition
        f.write(s.format(atom[0], atom[1], atom[2], atom[3], atom[4], atom[5], atom[6] - cmx, atom[7] - cmx, atom[8] - cmx, atom[9], atom[10], atom[11]))
        #if a (input) = c (center of mass), the pdb will be output with the coordinates shifted to the origin
            #subtract the center of mass of the coordinate from the coordinate (columns 6, 7, and 8)

f.close()

print("Done!")
